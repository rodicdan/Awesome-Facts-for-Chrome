// Generated by CoffeeScript 1.3.3
(function() {
  var DEBUG, DLog, FactsList;

  DEBUG = false;

  DLog = function(content) {
    if (DEBUG) {
      return console.log(content);
    }
  };

  FactsList = (function() {
    var _instance;

    FactsList.prototype.MINIMUM_FACTS_COUNT = 50;

    FactsList.prototype.MAX_STORED = 200;

    FactsList.prototype.factsUrl = 'http://simple-planet-5852.herokuapp.com/facts?format=json&count=80';

    FactsList.prototype.factsIdentifier = 'factsList';

    FactsList.prototype.readFactsIdentifier = 'factsRead';

    FactsList.prototype.facts = [];

    FactsList.prototype.readFacts = {
      'count': 0
    };

    FactsList.prototype.isEnabled = true;

    _instance = null;

    FactsList.instance = function() {
      return _instance != null ? _instance : _instance = new this;
    };

    function FactsList() {
      this.isEnabled = window.localStorage.getItem('pluginEnabled') || this.isEnabled;
      if (this.isEnabled === true || this.isEnabled === 'true') {
        this.isEnabled = true;
        window.localStorage.setItem('pluginEnabled', true);
      } else {
        this.isEnabled = false;
      }
      window.FactsUtils.updateBadge(this.isEnabled);
      this.facts = JSON.parse(window.localStorage.getItem("factsList")) || this.facts;
      this.readFacts = JSON.parse(window.localStorage.getItem("factsRead")) || this.readFacts;
      this.fetchFactsIfRequired();
    }

    FactsList.prototype.fetchFacts = function(callback) {
      var _this = this;
      if (callback == null) {
        callback = null;
      }
      DLog('fetching facts');
      return $.get(this.factsUrl, function(data) {
        if (data != null) {
          _this.facts = _this.facts.concat(data);
          DLog(_this.facts);
          _this.saveFacts();
          if (callback != null) {
            return callback(_this.facts);
          }
        }
      });
    };

    FactsList.prototype.fetchFactsIfRequired = function() {
      DLog('checking if fetch needed');
      if (this.facts.length < this.MINIMUM_FACTS_COUNT) {
        return this.fetchFacts();
      }
    };

    FactsList.prototype.getFact = function() {
      var targetFact;
      this.fetchFactsIfRequired();
      targetFact = this.facts.splice(0, 1)[0];
      DLog(targetFact);
      while (this.isReadFact(targetFact)) {
        targetFact = this.facts.splice(0, 1)[0];
      }
      this.saveReadFact(targetFact);
      this.saveFacts();
      return targetFact;
    };

    FactsList.prototype.saveFacts = function() {
      return window.localStorage.setItem(this.factsIdentifier, JSON.stringify(this.facts));
    };

    FactsList.prototype.saveReadFacts = function() {
      return window.localStorage.setItem(this.readFactsIdentifier, JSON.stringify(this.readFacts));
    };

    FactsList.prototype.saveReadFact = function(fact) {
      this.readFacts[fact.id] = true;
      this.readFacts["count"] += 1;
      this.saveReadFacts();
      return this.clearReadFactsIfRequired();
    };

    FactsList.prototype.isReadFact = function(fact) {
      if (this.readFacts[fact.id] != null) {
        return true;
      } else {
        return false;
      }
    };

    FactsList.prototype.clearReadFactsIfRequired = function() {
      if (this.readFacts["count"] > this.MAX_STORED) {
        this.readFacts = {
          "count": 0
        };
        return this.saveReadFacts();
      }
    };

    return FactsList;

  })();

  FactsList.instance();

  chrome.extension.onRequest.addListener(function(request, sender, sendResponse) {
    var result;
    if (request.action === 'getFact') {
      return sendResponse({
        value: FactsList.instance().getFact()
      });
    } else if (request.action === 'isEnabled') {
      result = window.localStorage.getItem('pluginEnabled') === 'true';
      return sendResponse({
        value: result
      });
    }
  });

}).call(this);
